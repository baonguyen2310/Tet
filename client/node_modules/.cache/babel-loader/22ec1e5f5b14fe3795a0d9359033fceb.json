{"ast":null,"code":"import _regeneratorRuntime from\"/home/bao/webProject/my-app/projectTet/client/node_modules/@babel/runtime/regenerator/index.js\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(fetchPostSaga),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(createPostSaga),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(updatePostSaga),_marked4=/*#__PURE__*/_regeneratorRuntime.mark(mySaga);import{takeLatest,call,put}from'redux-saga/effects';import*as actions from'../actions';import*as api from'../../api';function fetchPostSaga(action){var posts;return _regeneratorRuntime.wrap(function fetchPostSaga$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(api.fetchPosts);case 3:posts=_context.sent;console.log('[posts]',posts);_context.next=7;return put(actions.getPosts.getPostSuccess(posts.data));case 7:_context.next=14;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);console.log(_context.t0);_context.next=14;return put(actions.getPosts.getPostFailure(_context.t0));case 14:case\"end\":return _context.stop();}}},_marked,null,[[0,9]]);}function createPostSaga(action){var post;return _regeneratorRuntime.wrap(function createPostSaga$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return call(api.createPost,action.payload);case 3:post=_context2.sent;console.log('[create-post-saga]',post);_context2.next=7;return put(actions.createPost.createPostSuccess(post.data));case 7:_context2.next=14;break;case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0);_context2.next=14;return put(actions.createPost.createPostFailure(_context2.t0));case 14:case\"end\":return _context2.stop();}}},_marked2,null,[[0,9]]);}function updatePostSaga(action){var updatedPost;return _regeneratorRuntime.wrap(function updatePostSaga$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return call(api.updatePost,action.payload);case 3:updatedPost=_context3.sent;console.log('[updated-post-saga]',updatedPost);_context3.next=7;return put(actions.updatePost.updatePostSuccess(updatedPost.data));case 7:_context3.next=14;break;case 9:_context3.prev=9;_context3.t0=_context3[\"catch\"](0);console.log(_context3.t0);_context3.next=14;return put(actions.updatePost.updatePostFailure(_context3.t0));case 14:case\"end\":return _context3.stop();}}},_marked3,null,[[0,9]]);}function mySaga(){return _regeneratorRuntime.wrap(function mySaga$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return takeLatest(actions.getPosts.getPostsRequest,fetchPostSaga);case 2:_context4.next=4;return takeLatest(actions.createPost.createPostRequest,createPostSaga);case 4:_context4.next=6;return takeLatest(actions.updatePost.updatePostRequest,updatePostSaga);case 6:case\"end\":return _context4.stop();}}},_marked4);}export default mySaga;","map":{"version":3,"sources":["/home/bao/webProject/my-app/projectTet/client/src/redux/sagas/index.js"],"names":["fetchPostSaga","createPostSaga","updatePostSaga","mySaga","takeLatest","call","put","actions","api","action","fetchPosts","posts","console","log","getPosts","getPostSuccess","data","getPostFailure","createPost","payload","post","createPostSuccess","createPostFailure","updatePost","updatedPost","updatePostSuccess","updatePostFailure","getPostsRequest","createPostRequest","updatePostRequest"],"mappings":"kLAIUA,a,iDAYAC,c,iDAYAC,c,iDAYAC,M,EAxCV,OAASC,UAAT,CAAqBC,IAArB,CAA2BC,GAA3B,KAAsC,oBAAtC,CACA,MAAO,GAAKC,CAAAA,OAAZ,KAAyB,YAAzB,CACA,MAAO,GAAKC,CAAAA,GAAZ,KAAqB,WAArB,CAEA,QAAUR,CAAAA,aAAV,CAAwBS,MAAxB,kKAEsB,MAAMJ,CAAAA,IAAI,CAACG,GAAG,CAACE,UAAL,CAAV,CAFtB,OAEcC,KAFd,eAGQC,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAuBF,KAAvB,EAHR,gBAIQ,MAAML,CAAAA,GAAG,CAACC,OAAO,CAACO,QAAR,CAAiBC,cAAjB,CAAgCJ,KAAK,CAACK,IAAtC,CAAD,CAAT,CAJR,sFAMQJ,OAAO,CAACC,GAAR,cANR,iBAOQ,MAAMP,CAAAA,GAAG,CAACC,OAAO,CAACO,QAAR,CAAiBG,cAAjB,aAAD,CAAT,CAPR,oEAYA,QAAUhB,CAAAA,cAAV,CAAyBQ,MAAzB,uKAEqB,MAAMJ,CAAAA,IAAI,CAACG,GAAG,CAACU,UAAL,CAAiBT,MAAM,CAACU,OAAxB,CAAV,CAFrB,OAEcC,IAFd,gBAGQR,OAAO,CAACC,GAAR,CAAY,oBAAZ,CAAkCO,IAAlC,EAHR,iBAIQ,MAAMd,CAAAA,GAAG,CAACC,OAAO,CAACW,UAAR,CAAmBG,iBAAnB,CAAqCD,IAAI,CAACJ,IAA1C,CAAD,CAAT,CAJR,0FAMQJ,OAAO,CAACC,GAAR,eANR,kBAOQ,MAAMP,CAAAA,GAAG,CAACC,OAAO,CAACW,UAAR,CAAmBI,iBAAnB,cAAD,CAAT,CAPR,sEAYA,QAAUpB,CAAAA,cAAV,CAAyBO,MAAzB,8KAE4B,MAAMJ,CAAAA,IAAI,CAACG,GAAG,CAACe,UAAL,CAAiBd,MAAM,CAACU,OAAxB,CAAV,CAF5B,OAEcK,WAFd,gBAGQZ,OAAO,CAACC,GAAR,CAAY,qBAAZ,CAAmCW,WAAnC,EAHR,iBAIQ,MAAMlB,CAAAA,GAAG,CAACC,OAAO,CAACgB,UAAR,CAAmBE,iBAAnB,CAAqCD,WAAW,CAACR,IAAjD,CAAD,CAAT,CAJR,0FAMQJ,OAAO,CAACC,GAAR,eANR,kBAOQ,MAAMP,CAAAA,GAAG,CAACC,OAAO,CAACgB,UAAR,CAAmBG,iBAAnB,cAAD,CAAT,CAPR,sEAYA,QAAUvB,CAAAA,MAAV,sIACI,MAAMC,CAAAA,UAAU,CAACG,OAAO,CAACO,QAAR,CAAiBa,eAAlB,CAAmC3B,aAAnC,CAAhB,CADJ,wBAEI,MAAMI,CAAAA,UAAU,CAACG,OAAO,CAACW,UAAR,CAAmBU,iBAApB,CAAuC3B,cAAvC,CAAhB,CAFJ,wBAGI,MAAMG,CAAAA,UAAU,CAACG,OAAO,CAACgB,UAAR,CAAmBM,iBAApB,CAAuC3B,cAAvC,CAAhB,CAHJ,wDAMA,cAAeC,CAAAA,MAAf","sourcesContent":["import { takeLatest, call, put } from 'redux-saga/effects';\nimport * as actions from '../actions';\nimport * as api from '../../api';\n\nfunction* fetchPostSaga(action) {\n    try {\n        const posts = yield call(api.fetchPosts);\n        console.log('[posts]', posts);\n        yield put(actions.getPosts.getPostSuccess(posts.data));\n    } catch (err){\n        console.log(err);\n        yield put(actions.getPosts.getPostFailure(err));\n    }\n    \n}\n\nfunction* createPostSaga(action) {\n    try {\n        const post = yield call(api.createPost, action.payload);\n        console.log('[create-post-saga]', post);\n        yield put(actions.createPost.createPostSuccess(post.data));\n    } catch (err){\n        console.log(err);\n        yield put(actions.createPost.createPostFailure(err));\n    }\n    \n}\n\nfunction* updatePostSaga(action) {\n    try {\n        const updatedPost = yield call(api.updatePost, action.payload);\n        console.log('[updated-post-saga]', updatedPost);\n        yield put(actions.updatePost.updatePostSuccess(updatedPost.data));\n    } catch (err){\n        console.log(err);\n        yield put(actions.updatePost.updatePostFailure(err));\n    }\n    \n}\n\nfunction* mySaga() {\n    yield takeLatest(actions.getPosts.getPostsRequest, fetchPostSaga);\n    yield takeLatest(actions.createPost.createPostRequest, createPostSaga);\n    yield takeLatest(actions.updatePost.updatePostRequest, updatePostSaga);\n}\n\nexport default mySaga;"]},"metadata":{},"sourceType":"module"}